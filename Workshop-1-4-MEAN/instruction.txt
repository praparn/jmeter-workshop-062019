============================================================================================
Lab Description
============================================================================================
Machine name		            			        Roles:						IP Address: (Private)		IP Address: (Public)       SSH
Training_NodeJS_Scaling_StudentG1_1    	            Load Test Machine			10.21.1.27					52.221.241.207		       ssh -i "lab_gluster.pem" ubuntu@52.221.241.207
Training_NodeJS_Scaling_StudentG1_2                 WebServer Docker		    10.21.1.120				    18.136.104.148             ssh -i "lab_gluster.pem" ubuntu@18.136.104.148 
Training_NodeJS_Scaling_StudentG1_3       	        NodePort					10.21.1.164					18.136.211.235             ssh -i "lab_gluster.pem" ubuntu@18.136.211.235          

============================================================================================
Step 1: Setup basic meanstack for operate load test (WebServer Docker)
============================================================================================
1. Clone meanstack by command: 
    cd ~/
    git clone https://github.com/meanjs/mean.git meanjs
    cd meanjs/

2. Edit dockerfile before operate by command:
    sed -i -e 's/FROM ubuntu:latest/FROM ubuntu:16.04/g' Dockerfile-production
    sed -i -e 's/FROM ubuntu:latest/FROM ubuntu:16.04/g' Dockerfile

3. Start basic meanstack by command:
    docker image build -t mean .
    docker container run -dt -p 27017:27017 -d --name db mongo
    docker container run -dt -p 80:3000 -p 35729:35729 --link db:db_1 --name mean mean
    docker container ls
    docker logs -f mean

    *Remark: 
        3.1 Wait until mean ready with simple log below
        3.2 In case need to remove and redeploy please kindly following command below:
            docker stop mean db && docker rm mean db

---------------------------------------------------------------------------------------------
MEAN.JS - Development Environment

Environment:     development
Server:          http://0.0.0.0:3000
Database:        mongodb://172.17.0.2/mean-dev
App version:     0.6.0
MEAN.JS version: 0.6.0
---------------------------------------------------------------------------------------------

4. Test access web from url: http://<public ip of WebServer Docker> and Signup with your account

5. Run mongo-express for provide mongodb webgui by command:
    docker image pull mongo-express:0.49
    docker container run -dt -p 8081:8081 --link db:mongo --name webmongo mongo-express:0.49

6. Open mongo-express from url: http://<public ip of WebServer Docker>:8081

7. Access to database (mean-dev) ==> collections (users) and check your database

8. Start monitoring dashboard for performance analysis by command:
    docker image pull labdocker/cadvisor:latest
	docker container run \
	--mount type=bind,source=/var/run,target=/var/run \
	--mount type=bind,source=/sys,target=/sys,readonly \
	--mount type=bind,source=/var/lib/docker,target=/var/lib/docker,readonly \
	--publish=8080:8080 \
	--detach=true \
	--name=cadvisor \
	labdocker/cadvisor:latest

9. Check meanjs id and open cadvisor by command:
    docker container ls ==> Note id of cadvisor
    Open url: http://<public ip of WebServer Docke>:8080

============================================================================================
Step 2: Start Performance Test (Load Test Machine)
============================================================================================
0. In case UltraVNC is cannot connect. Kill and recreate vnc session by command:
    vncserver -kill :1
    vncserver -geometry 1600x900 :1

1. Open Jmeter GUI (If disapper. Please run
   sed -i -e 's/"${HEAP:="-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"}"/"${HEAP:="-Xms2g -Xmx2g -XX:MaxMetaspaceSize=512m"}"/g' /home/ubuntu/apache-jmeter-5.1.1/bin/jmeter
   /home/ubuntu/apache-jmeter-5.1.1/bin/jmeter

============================================================================================
Step 3: Start Performance Test Scenario 1 (First Page View)
============================================================================================
1. (Local machine): Open url for cAdvisor in browser: http://<Public IP of WebServer Docker>:8080
    1.1 Duplicate tab for monitor: Container: mean
    1.2 Duplicate tab for monitor: Container: mongodb

2. (Load Test Machine) Open Test File name: FirstPage.jmx

3. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    3.1 Select Test Plan(First Page View) ==> "User Defined Variables" and Change value on "BASE_URL_1" to <Private IP of WebServer Docker>
    3.2 Select Test Plan(First Page View) ==> "Thread Group (First Page View)" and Change Value:
        3.2.1 Nuber of Threads (users): 200
        3.2.2 Ramp-Up Period (in seconds): 120
        3.2.3 Loop Count: [] Forever

4. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

5. (Load Test Machine) Start load test by menu (Run ==> Start) with 5 min duration and Check result

6. (Load Test Machine) Stop load test by menu (Run ==> Shutdown)

7. (Load Test Machine) Check result from all listerner


============================================================================================
Step 4: Start Performance Test Scenario 2 (SignUp View)
============================================================================================
1. (Local machine): Open url for cAdvisor in browser: http://<Public IP of WebServer Docker>:8080
    1.1 Duplicate tab for monitor: Container: mean
    1.2 Duplicate tab for monitor: Container: mongodb

2. (Local machine) Open url for MongoExpress in browser: http://<Public IP of WebServer Docker>:8081

3. (Load Test Machine) Open Test File name: Signup.jmx

4. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    4.1 Select Test Plan(SignUp) ==> "User Defined Variables" and Change value on "BASE_URL_1" to <Private IP of WebServer Docker>
    4.2 Select Test Plan(SignUp) ==> "Thread Group (SignUp)" and Change Value:
        4.2.1 Nuber of Threads (users): 200
        4.2.2 Ramp-Up Period (in seconds): 120
        4.2.3 Loop Count: [] Forever

5. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

6. (Load Test Machine) Start load test by menu (Run ==> Start) wait until all data was insert complete (20,000 records) ~ 10 - 15 min

7. (Load Test Machine) Check result from all listerner, MongoExpress

*Remark: In case we need re-load test this scenario. Please kindly clear data from table user,session first


============================================================================================
Step 5: Start Performance Test Scenario 3 (Logon/Chat)
============================================================================================
1. (Local machine): Open url for cAdvisor in browser: http://<Public IP of WebServer Docker>:8080
    1.1 Duplicate tab for monitor: Container: mean
    1.2 Duplicate tab for monitor: Container: mongodb

2. (Local machine) Open url for MongoExpress in browser: http://<Public IP of WebServer Docker>:8081

3. (Load Test Machine) Open Test File name: Login.jmx

4. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    4.1 Select Test Plan(Login) ==> "User Defined Variables" and Change value on "BASE_URL_1" to <Private IP of WebServer Docker>
    4.2 Select Test Plan(Login) ==> "Thread Group (Login)" and Change Value:
        4.2.1 Nuber of Threads (users): 200
        4.2.2 Ramp-Up Period (in seconds): 120
        4.2.3 Loop Count: [] Forever

5. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

6. (Load Test Machine) Start load test by menu (Run ==> Start) wait about 5 min before shutdown

7. (Load Test Machine) Stop load test by menu (Run ==> Shutdown)

8. (Load Test Machine) Check result from all listerner

*Remark: In case we need re-load test this scenario. Please kindly clear data from table session first


============================================================================================
Step 6: Start Performance Test Scenario 4 (JDBC on MongoDB)
============================================================================================
1. (Load Test Machine): Install Jmeter Plugin Manager and Update library "MongoDB Java Driver" to jmeter by command:
    cd ~
    wget wget https://jmeter-plugins.org/get/
    mv index.html ./apache-jmeter-5.0/lib/ext/jmeter-plugins-manager-1.3.jar
    rm ./apache-jmeter-5.0/lib/mongo-java-driver-2.11.3.jar 
    curl https://repo1.maven.org/content/repositories/releases/org/mongodb/mongo-java-driver/3.0.0/mongo-java-driver-3.0.0.jar > ./apache-jmeter-5.0/lib/ext/mongodb-driver-driver-3.10.0.jar
    *Restart Jmeter again for support new jar file and check JMeter Pluging Manager

2. (Local machine) Open url for MongoExpress in browser: http://<Public IP of WebServer Docker>:8081

3. (Load Test Machine) Open Test File name: MongoDB.jmx

4. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    4.1 Select Test Plan(Login) ==> "User Defined Variables" and Change Value:
        4.1.1 BASE_URL_1: <Private IP of WebServer Docker>
        4.1.2 mongoHost:  <Private IP of WebServer Docker>
        4.1.3 databaseName: mean-dev
        4.1.4 collectionName: users
        4.1.5 mongoPort: 27017

    4.2 Select Test Plan(Login) ==> "Thread Group (Login)" and Change Value:
        4.2.1 Nuber of Threads (users): 200
        4.2.2 Ramp-Up Period (in seconds): 120
        4.2.3 Loop Count: [] Forever

5. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

6. (Load Test Machine) Start load test by menu (Run ==> Start) wait about 5 min before shutdown 

7. (Load Test Machine) Stop load test by menu (Run ==> Shutdown)

8. (Load Test Machine) Check result from all listerner

*Remark: In case we need re-load test this scenario. Please kindly clear data from table session first
