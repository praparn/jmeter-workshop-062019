============================================================================================
Part 1: Pull Resource and Open JMeter
============================================================================================
1. (Load Test Machine) Pull Github file command: 
    cd ~
    git clone https://github.com/praparn/jmeter-workshop-062019.git

2. (Load Test Machine) In case UltraVNC is cannot connect. Kill and recreate vnc session by command:
    vncserver -kill :1
    vncserver -geometry 1600x900 :1

3. (Load Test Machine) Open Jmeter GUI (If disapper. Please run
   sed -i -e 's/"${HEAP:="-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"}"/"${HEAP:="-Xms2g -Xmx2g -XX:MaxMetaspaceSize=512m"}"/g' /home/ubuntu/apache-jmeter-5.1.1/bin/jmeter
   /home/ubuntu/apache-jmeter-5.1.1/bin/jmeter

============================================================================================
Part 2: Build Image of Docker for JMeter
============================================================================================
1. (Load Test Machine) Build docker image for JMeter by command:
    cd ~/jmeter-workshop-062019/Workshop-2-6-Docker/dockerfile
    docker build -t jmeter ./

2. (Load Test Machine) Check image by command: docker image ls

3. (Load Test Machine) Create docker network and access to share testplan path by command:
    docker network create --driver bridge \
    --subnet=192.168.100.0/24 --gateway=192.168.100.5 --opt="com.docker.network.mtu"="1500" jmeternet

    cd ~/jmeter-workshop-062019/Workshop-2-6-Docker/jmeter


4. (Load Test Machine) Run 3 jmeter server and 1 jmeter client for generate load by command:
    echo "JMeter Server Node1"
    docker run -dit --net jmeternet --ip 192.168.100.10 --mount type=bind,source=$(jmeter-path),target=/mnt/jmeter \
	--rm jmeter -n -s \
	-Jclient.rmi.localport=7000 -Jserver.rmi.localport=60000 \
	-j $(jmeter_path)/server/slave_$(date +%Y%m%d_%H%M%S)_192.168.100.10.log 

    echo "JMeter Server Node2"
    docker run -dit --net jmeternet --ip 192.168.100.11 --mount type=bind,source=$(jmeter-path),target=/mnt/jmeter \
	--rm jmeter -n -s \
	-Jclient.rmi.localport=7000 -Jserver.rmi.localport=60000 \
	-j $(jmeter_path)/server/slave_$(date +%Y%m%d_%H%M%S)_192.168.100.11.log 

    echo "JMeter Server Node3"
    docker run -dit --net jmeternet --ip 192.168.100.12 --mount type=bind,source=$(jmeter-path),target=/mnt/jmeter \
	--rm jmeter -n -s \
	-Jclient.rmi.localport=7000 -Jserver.rmi.localport=60000 \
	-j $(jmeter_path)/server/slave_$(date +%Y%m%d_%H%M%S)_192.168.100.12.log 

    echo "JMeter Client"
    docker run -dit --net jmeternet --ip 192.168.100.20 --mount type=bind,source=$(jmeter-path),target=/mnt/jmeter \
	--rm jmeter -n -s \
	-Jclient.rmi.localport=7000 -Jserver.rmi.localport=60000 \
	-j $(jmeter_path)/server/slave_$(date +%Y%m%d_%H%M%S)_192.168.100.12.log 

5. (Load Test Machine) Open "FirstPage.jmx" and add some listener we will find new pluging there
    "jp@gc - Hits per Second" ,"jp@gc - Resposne Latencies Over Time", "jp@gc - Response Times Over Time", "jp@gc - Response Codes per Second"

6. (Load Test Machine) Start test performance by command:

============================================================================================
Part 3: Install plugin via command line
============================================================================================
1. Install uzip and Download plugin and unzip Example (Custom Thread Groups)
    curl https://jmeter-plugins.org/files/packages/jpgc-casutg-2.8.zip > ~/jpgc-casutg-2.8.zip
    sudo apt-get install -y unzip
    unzip jpgc-casutg-2.8.zip -d jpgc-casutg-2.8
    cp ~/jpgc-casutg-2.8/lib/ext/jmeter-plugins-casutg-2.8.jar ~/apache-jmeter-5.1.1/lib/ext/

2. Open JMeter and Add Thread Group "jp@gc - Ultimate Thread Group
   sed -i -e 's/"${HEAP:="-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m"}"/"${HEAP:="-Xms2g -Xmx2g -XX:MaxMetaspaceSize=512m"}"/g' /home/ubuntu/apache-jmeter-5.1.1/bin/jmeter
   /home/ubuntu/apache-jmeter-5.1.1/bin/jmeter

============================================================================================
Step 3: Start Performance Test Scenario 1 (First Page View)
============================================================================================
1. (Local machine): Open url for cAdvisor in browser: http://<Public IP of WebServer Docker>:8080
    1.1 Duplicate tab for monitor: Container: mean
    1.2 Duplicate tab for monitor: Container: mongodb

2. (Load Test Machine) Open Test File name: FirstPage.jmx

3. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    3.1 Select Test Plan(First Page View) ==> "User Defined Variables" and Change value on "BASE_URL_1" to <Private IP of WebServer Docker>
    3.2 Select Test Plan(First Page View) ==> "Thread Group (First Page View)" and Change Value:
        3.2.1 Nuber of Threads (users): 200
        3.2.2 Ramp-Up Period (in seconds): 120
        3.2.3 Loop Count: [] Forever

4. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

5. (Load Test Machine) Start load test by menu (Run ==> Start) with 5 min duration and Check result

6. (Load Test Machine) Stop load test by menu (Run ==> Shutdown)

7. (Load Test Machine) Check result from all listerner


============================================================================================
Step 4: Start Performance Test Scenario 2 (SignUp View)
============================================================================================
1. (Local machine): Open url for cAdvisor in browser: http://<Public IP of WebServer Docker>:8080
    1.1 Duplicate tab for monitor: Container: mean
    1.2 Duplicate tab for monitor: Container: mongodb

2. (Local machine) Open url for MongoExpress in browser: http://<Public IP of WebServer Docker>:8081

3. (Load Test Machine) Open Test File name: Signup.jmx

4. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    4.1 Select Test Plan(SignUp) ==> "User Defined Variables" and Change value on "BASE_URL_1" to <Private IP of WebServer Docker>
    4.2 Select Test Plan(SignUp) ==> "Thread Group (SignUp)" and Change Value:
        4.2.1 Nuber of Threads (users): 200
        4.2.2 Ramp-Up Period (in seconds): 120
        4.2.3 Loop Count: [] Forever

5. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

6. (Load Test Machine) Start load test by menu (Run ==> Start) wait until all data was insert complete (20,000 records) ~ 10 - 15 min

7. (Load Test Machine) Check result from all listerner, MongoExpress

*Remark: In case we need re-load test this scenario. Please kindly clear data from table user,session first


============================================================================================
Step 5: Start Performance Test Scenario 3 (Logon/Chat)
============================================================================================
1. (Local machine): Open url for cAdvisor in browser: http://<Public IP of WebServer Docker>:8080
    1.1 Duplicate tab for monitor: Container: mean
    1.2 Duplicate tab for monitor: Container: mongodb

2. (Local machine) Open url for MongoExpress in browser: http://<Public IP of WebServer Docker>:8081

3. (Load Test Machine) Open Test File name: Login.jmx

4. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    4.1 Select Test Plan(Login) ==> "User Defined Variables" and Change value on "BASE_URL_1" to <Private IP of WebServer Docker>
    4.2 Select Test Plan(Login) ==> "Thread Group (Login)" and Change Value:
        4.2.1 Nuber of Threads (users): 200
        4.2.2 Ramp-Up Period (in seconds): 120
        4.2.3 Loop Count: [] Forever

5. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

6. (Load Test Machine) Start load test by menu (Run ==> Start) wait about 5 min before shutdown

7. (Load Test Machine) Stop load test by menu (Run ==> Shutdown)

8. (Load Test Machine) Check result from all listerner

*Remark: In case we need re-load test this scenario. Please kindly clear data from table session first


============================================================================================
Step 6: Start Performance Test Scenario 4 (JDBC on MongoDB)
============================================================================================
1. (Load Test Machine): Install Jmeter Plugin Manager and Update library "MongoDB Java Driver" to jmeter by command:
    cd ~
    wget wget https://jmeter-plugins.org/get/
    mv index.html ./apache-jmeter-5.0/lib/ext/jmeter-plugins-manager-1.3.jar
    rm ./apache-jmeter-5.0/lib/mongo-java-driver-2.11.3.jar 
    curl https://repo1.maven.org/content/repositories/releases/org/mongodb/mongo-java-driver/3.0.0/mongo-java-driver-3.0.0.jar > ./apache-jmeter-5.0/lib/ext/mongodb-driver-driver-3.10.0.jar
    *Restart Jmeter again for support new jar file and check JMeter Pluging Manager

2. (Local machine) Open url for MongoExpress in browser: http://<Public IP of WebServer Docker>:8081

3. (Load Test Machine) Open Test File name: MongoDB.jmx

4. (Load Test Machine) Configure private ip address of WebServer Docker on menu below:
    4.1 Select Test Plan(Login) ==> "User Defined Variables" and Change Value:
        4.1.1 BASE_URL_1: <Private IP of WebServer Docker>
        4.1.2 mongoHost:  <Private IP of WebServer Docker>
        4.1.3 databaseName: mean-dev
        4.1.4 collectionName: users
        4.1.5 mongoPort: 27017

    4.2 Select Test Plan(Login) ==> "Thread Group (Login)" and Change Value:
        4.2.1 Nuber of Threads (users): 200
        4.2.2 Ramp-Up Period (in seconds): 120
        4.2.3 Loop Count: [] Forever

5. (Load Test Machine) Clear existing data by menu (Run ==> Clear All)

6. (Load Test Machine) Start load test by menu (Run ==> Start) wait about 5 min before shutdown 

7. (Load Test Machine) Stop load test by menu (Run ==> Shutdown)

8. (Load Test Machine) Check result from all listerner

*Remark: In case we need re-load test this scenario. Please kindly clear data from table session first
